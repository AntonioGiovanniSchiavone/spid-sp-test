#!/usr/bin/env python3
import argparse
import logging
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), os.pardir))

from saml2.metadata import entity_descriptor
from saml2.server import Server
from spid_sp_test.metadata import SpidSpMetadataCheck
from spid_sp_test.metadata_extra import SpidSpMetadataCheckExtra
from spid_sp_test.authn_request import SpidSpAuthnReqCheck
from spid_sp_test.authn_request_extra import SpidSpAuthnReqCheckExtra

logger = logging.getLogger(__name__)


if __name__ == '__main__':
    _desc = (f'{__file__} -h for help')
    _epilog = f"""examples:
        {__file__} -metadata_url http://localhost:8000/spid/metadata --extra
        {__file__} -metadata_url file://metadata.xml
        {__file__} -metadata_url http://localhost:8000/spid/metadata -l test_Organization test_Signature
        {__file__} --idp-metadata
        {__file__} -metadata_url http://localhost:8000/spid/metadata --authn-url http://localhost:8000/spid/login/?idp=spid-idp-test

    """
    
    parser = argparse.ArgumentParser(
                        description = _desc, 
                        epilog = _epilog,
                        formatter_class = argparse.RawTextHelpFormatter
    )
    parser.add_argument('-metadata_url', required=False, default=None,
                        help=("URL where SAML2 Metadata resides: "
                              "it can be file://path or https://fqdn"))
    parser.add_argument('--idp-metadata', 
                        action="store_true", default=False,
                        help="get example IdP metadata")
    parser.add_argument('-l','--list', nargs='*', 
                        help='esecute only selected checks', 
                        required=False)
    parser.add_argument('--extra', 
                        action="store_true", default=False,
                        help="execute extra checks")

    parser.add_argument('--authn-url', required=False, default=None,
                        help=("URL where the SP initializes "
                              "the Authentication Request to this IDP"))

    parser.add_argument('-debug', required=False, 
                    choices=('CRITICAL', 'ERROR', 
                             'WARNING', 'INFO', 'DEBUG'), 
                    default='INFO',
                    help="Debug level, see python logging")
    args = parser.parse_args()
    
    logging.basicConfig(level=getattr(logging, args.debug))
    
    if len(sys.argv)==1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    
    if args.idp_metadata:
        from spid_sp_test.idp.idp import SAML2_IDP_CONFIG
        
        idp_server = Server(SAML2_IDP_CONFIG)
        idp_metadata = entity_descriptor(idp_server.config)
        print(idp_metadata.to_string().decode())
        sys.exit(0)
    
    elif args.metadata_url:
        metadata_check = SpidSpMetadataCheck(
                                metadata_url = args.metadata_url,
        )
        metadata_json_result = metadata_check.test_all()
        if args.extra:
            metadata_check_extra = SpidSpMetadataCheckExtra(
                                    metadata_url = args.metadata_url,
            )
            metadata_check_result_extra = metadata_check_extra.test_all()
        
        # if args.list:
            # for method in args.list:
                # meth = getattr(metadata_check, method, None)
                # if meth: 
                    # meth()
        # else:
            # metadata_json_result = metadata_check.test_all()
            
            # here report to export ...
            # print(metadata_json_result)
    else:
        logging.error('At least --id-metadata or --metadata-url is needed!')
        sys.exit(1)
    
    # authn request
    if args.authn_url:
        authn_check = SpidSpAuthnReqCheck(
                        metadata = metadata_check.metadata,
                        authn_request_url = args.authn_url
        )
        authn_json_result = authn_check.test_all()
        
        if args.extra:
            authn_check_extra = SpidSpAuthnReqCheckExtra(
                                    metadata = metadata_check.metadata,
                                    authn_request_url = args.authn_url,
            )
            authn_json_result_extra = authn_check_extra.test_all()
